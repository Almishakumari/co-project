import sys
import math
# corrected code
registers = {
    'zero':'00000000000000000000000000000000', 'ra':'00000000000000000000000000000000', 'sp':'00000000000000000000000000000000',
    'gp':'00000000000000000000000000000000', 'tp':'00000000000000000000000000000000', 't0':'00000000000000000000000000000000',
    't1':'00000000000000000000000000000000', 't2':'00000000000000000000000000000000', 's0':'00000000000000000000000000000000',
    's1':'00000000000000000000000000000000', 'a0':'00000000000000000000000000000000', 'a1':'00000000000000000000000000000000',
    'a2':'00000000000000000000000000000000', 'a3':'00000000000000000000000000000000', 'a4':'00000000000000000000000000000000',
    'a5':'00000000000000000000000000000000', 'a6':'00000000000000000000000000000000', 'a7':'00000000000000000000000000000000',
    's2':'00000000000000000000000000000000', 's3':'00000000000000000000000000000000', 's4':'00000000000000000000000000000000',
    's5':'00000000000000000000000000000000', 's6':'00000000000000000000000000000000', 's7':'00000000000000000000000000000000',
    's8':'00000000000000000000000000000000', 's9':'00000000000000000000000000000000', 's10':'00000000000000000000000000000000',
    's11':'00000000000000000000000000000000', 't3':'00000000000000000000000000000000', 't4':'00000000000000000000000000000000',
    't5':'00000000000000000000000000000000', 't6':'00000000000000000000000000000000'
}

#memory allocation of registers
memory = {
    '0x00010000': '00000000000000000000000000000000', '0x00010004': '00000000000000000000000000000000',
    '0x00010008': '00000000000000000000000000000000', '0x0001000c': '00000000000000000000000000000000', 
    '0x00010010': '00000000000000000000000000000000', '0x00010014': '00000000000000000000000000000000',
    '0x00010018': '00000000000000000000000000000000', '0x0001001c': '00000000000000000000000000000000',
    '0x00010020': '00000000000000000000000000000000', '0x00010024': '00000000000000000000000000000000',
    '0x00010028': '00000000000000000000000000000000', '0x0001002c': '00000000000000000000000000000000',
    '0x00010030': '00000000000000000000000000000000', '0x00010034': '00000000000000000000000000000000',
    '0x00010038': '00000000000000000000000000000000', '0x0001003c': '00000000000000000000000000000000',
    '0x00010040': '00000000000000000000000000000000', '0x00010044': '00000000000000000000000000000000',
    '0x00010048': '00000000000000000000000000000000', '0x0001004c': '00000000000000000000000000000000',
    '0x00010050': '00000000000000000000000000000000', '0x00010054': '00000000000000000000000000000000',
    '0x00010058': '00000000000000000000000000000000', '0x0001005c': '00000000000000000000000000000000',
    '0x00010060': '00000000000000000000000000000000', '0x00010064': '00000000000000000000000000000000',
    '0x00010068': '00000000000000000000000000000000', '0x0001006c': '00000000000000000000000000000000',
    '0x00010070': '00000000000000000000000000000000', '0x00010074': '00000000000000000000000000000000',
    '0x00010078': '00000000000000000000000000000000', '0x0001007c': '00000000000000000000000000000000'
}

#dictionary for storing reg values
rd = {
    '00000': '00000000000000000000000000000000',
    '00001': '00000000000000000000000000000000',
    '00010': '00000000000000000000000000000000',
    '00011': '00000000000000000000000000000000',
    '00100': '00000000000000000000000000000000',
    '00101': '00000000000000000000000000000000',
    '00110': '00000000000000000000000000000000',
    '00111': '00000000000000000000000000000000',
    '01000': '00000000000000000000000000000000',
    '01001': '00000000000000000000000000000000',
    '01010': '00000000000000000000000000000000',
    '01011': '00000000000000000000000000000000',
    '01100': '00000000000000000000000000000000',
    '01101': '00000000000000000000000000000000',
    '01110': '00000000000000000000000000000000',
    '01111': '00000000000000000000000000000000',
    '10000': '00000000000000000000000000000000',
    '10001': '00000000000000000000000000000000',
    '10010': '00000000000000000000000000000000',
    '10011': '00000000000000000000000000000000',
    '10100': '00000000000000000000000000000000',
    '10101': '00000000000000000000000000000000',
    '10110': '00000000000000000000000000000000',
    '10111': '00000000000000000000000000000000',
    '11000': '00000000000000000000000000000000',
    '11001': '00000000000000000000000000000000',
    '11010': '00000000000000000000000000000000',
    '11011': '00000000000000000000000000000000',
    '11100': '00000000000000000000000000000000',
    '11101': '00000000000000000000000000000000',
    '11110': '00000000000000000000000000000000',
    '11111': '00000000000000000000000000000000'
}

def binary_addition(a, b):
    max_len = max(len(a), len(b))
    a = a.zfill(max_len)
    b = b.zfill(max_len)
    result = ''
    carry = 0

    for i in range(max_len-1, -1, -1):
        temp = carry
        temp += 1 if a[i] == '1' else 0
        temp += 1 if b[i] == '1' else 0
        result = ('1' if temp % 2 == 1 else '0') + result
        carry = 0 if temp < 2 else 1       

    if carry != 0: 
        result = f'1{result}'

    return result.zfill(max_len)

def binary_subtraction(a, b):
    max_len = max(len(a), len(b))
    a = a.zfill(max_len)
    b = b.zfill(max_len)

    # Convert b to its 2's complement form
    b_complement = ''.join('1' if bit == '0' else '0' for bit in b)
    b_complement = binary_addition(b_complement, '1').zfill(max_len)

    # Perform binary addition
    result = binary_addition(a, b_complement)

    # Ignore overflow and return last max_len bits
    return result[-max_len:]


def decimal_to_binary(decimal_number, num_bits=12):
    try:
        decimal_number = int(decimal_number)  # Convert the input to an integer
    except ValueError:
        return 'Error: Input must be a valid integer.'
    if decimal_number >= 0:
        return bin(decimal_number)[2:].zfill(num_bits)  # Convert positive numbers to binary and zero-pad
    else:
        binary_positive = bin(abs(decimal_number))[2:]  # Convert the absolute value to binary
        inverted = ''.join('1' if bit == '0' else '0' for bit in binary_positive)  # Invert the bits
        inverted = inverted.zfill(num_bits)  # Zero-pad to fill the specified number of bits
        index = inverted.rfind('0')  # Find the rightmost '0' bit
        if index == -1:
            return '1' + '0' * (num_bits - 1)  # If all bits are '1', return the smallest negative number for the specified number of bits
        else:
            return inverted[:index] + '1' + inverted[index + 1:]  # Perform the two's complement inversion and add 1
        

def decimal_to_binary(decimal_number, num_bits=12):
    try:
        decimal_number = int(decimal_number)  # Convert the input to an integer
    except ValueError:
        return 'Error: Input must be a valid integer.'
    
    if decimal_number >= 0:
        # Convert positive numbers to binary and zero-pad
        return bin(decimal_number)[2:].zfill(num_bits)
    else:
        # Convert the absolute value to binary
        binary_positive = bin(abs(decimal_number))[2:]
        # Invert the bits
        inverted = ''.join('1' if bit == '0' else '0' for bit in binary_positive)
        # Zero-pad to fill the specified number of bits
        inverted = inverted.zfill(num_bits)
        # Find the rightmost '0' bit
        index = inverted.rfind('0')
        if index == -1:
            # If all bits are '1', return the smallest negative number for the specified number of bits
            return '1' + '0' * (num_bits - 1)
        else:
            # Perform the two's complement inversion and add 1
            return inverted[:index] + '1' + inverted[index + 1:]        




def decode_instruction(instruction):
    opcode = instruction[25:32]
    # print(opcode)
    # print(instruction)
    if opcode == '0110011':  # R-type
        # rd = instruction[7:12]
        # funct3 = instruction[12:15]
        # rs1 = instruction[15:20]
        # rs2 = instruction[20:25]
        # funct7 = instruction[25:32]
        return Rtype
    
    elif opcode in ['0000011', '0010011', '1100111']:  # I-type
        rd = instruction[7:12]
        print(rd)
        funct3 = instruction[12:15]
        rs1 = instruction[15:20]
        print(rs1)
        imm = instruction[20:32]
        return "I-type", rd, rs1, funct3, imm
    
    elif opcode == '0100011':  # S-type
        imm = instruction[25:32] + instruction[7:12]
        rs1 = instruction[15:20]
        rs2 = instruction[20:25]
        funct3 = instruction[12:15]
        return "S-type", rs1, rs2, funct3, imm
    
    elif opcode == '1100011':  # B-type
        imm = instruction[31:32] + instruction[7:12] + instruction[25:31] + instruction[8:9]
        rs1 = instruction[15:20]
        rs2 = instruction[20:25]
        funct3 = instruction[12:15]
        return "B-type", rs1, rs2, funct3, imm
    
    elif opcode in ['0110111', '0010111']:  # U-type
        rd = instruction[7:12]
        imm = instruction[0:32]
        return "U-type", rd, imm
    
    elif opcode == '1101111':  # J-type
        rd = instruction[7:12]
        imm = instruction[31:32] + instruction[21:31] + instruction[20:21] + instruction[12:20]
        return "J-type", rd, imm
    
    else:
        return "Unknown"


# def Itype(instruction):
#     opcode = instruction_bits[25:32]
#     funct3 = instruction_bits[12:15]
#     immediate = instruction_bits[25:32]
#     rs1 = instruction_bits[15:20]
#     rs2 = instruction_bits[20:25]
#     rd = instruction_bits[7:12]
#     return opcode, funct3, immediate, rs1, rs2, rd

def Stype(instruction_bits):
    opcode = instruction_bits[25:32]
    funct3 = instruction_bits[12:15]
    immediate = instruction_bits[25:32]
    rs1 = instruction_bits[15:20]
    rs2 = instruction_bits[20:25]
    imm_left = instruction_bits[7:12]
    return opcode, funct3, immediate, rs1, rs2, imm_left

def Utype(instruction_bits):
    opcode = instruction_bits[25:32]
    immediate = instruction_bits[25:32]
    rd = instruction_bits[7:12]
    return opcode, immediate, rd

def Jtype(instruction_bits):
    opcode = instruction_bits[25:32]
    
    immediate = instruction_bits[25:32]
    rd = instruction_bits[15:20]
    
    return opcode, immediate, rd

def Rtype(instruction):
    
    funct3 = instruction[-15:-12]
    funct7 = instruction[-32:-25]
    rs1 = instruction[-20:-15]
    rs2 = instruction[-25:-20]
    rd = instruction[-12:-7]
    return 

def add(rd, rs1, rs2):
    return rd, rs1 + rs2

def sub(rd, rs1, rs2):
    return rd, rs1 - rs2

def sll(rd, rs1, rs2):
    return rd, rs1 << (rs2 & 0b11111)

def slt(rd, rs1, rs2):
    return rd, int(rs1 < rs2)

def sltu(rd, rs1, rs2):
    return rd, int(rs1 < rs2)

def xor(rd, rs1, rs2):
    return rd, rs1 ^ rs2

def srl(rd, rs1, rs2):
    return rd, rs1 >> (rs2 & 0b11111)

def _or(rd, rs1, rs2):
    return rd, rs1 | rs2

def _and(rd, rs1, rs2):
    return rd, rs1 & rs2







# Main simulator 
def simulator(instruction, rs1_val, rs2_val):
    opcode, funct3, funct7, rs1, rs2, rd = Rtype(instruction)
    if opcode == "0110011":
        if funct3 == "000" and funct7 == "0000000":
            return binary_addition(rd, rs1_val, rs2_val)
        elif funct3 == "000" and funct7 == "0100000":
            return binary_subtraction(rd, rs1_val, rs2_val)
        elif funct3 == "001" and funct7 == "0000000":
            return sll(rd, rs1_val, rs2_val)
        elif funct3 == "010" and funct7 == "0000000":
            return slt(rd, rs1_val, rs2_val)
        elif funct3 == "011" and funct7 == "0000000":
            return sltu(rd, rs1_val, rs2_val)
        elif funct3 == "100" and funct7 == "0000000":
            return xor(rd, rs1_val, rs2_val)
        elif funct3 == "101" and funct7 == "0000000":
            return srl(rd, rs1_val, rs2_val)
        elif funct3 == "110" and funct7 == "0000000":
            return _or(rd, rs1_val, rs2_val)
        elif funct3 == "111" and funct7 == "0000000":
            return _and(rd, rs1_val, rs2_val)
        else:
            raise ValueError("Unsupported R-type instruction")
    else:
        raise ValueError("Invalid opcode for R-type instruction")
    
with open("C:\\Users\\almis\\Downloads\\s_test1.txt","r") as file:
    lines=file.readlines()
    n=len(lines)
with open("output.txt","w") as output:
    pc=1
    while pc<=n and lines[pc-1]!="00000000000000000000000001100011":
        output.write(f'0b{decimal_to_binary(pc * 4)} ')
        line=lines[pc-1].strip()
        if line[-7::]=='0110011':
            Rtype(line)
            pc+=1    
        v=rd.values()    
        for i in v:
            output.write(f'0b{i} ')
        output.write('\n')
for key, value in memory.items():
        output.write(f'{key}:0b{value}\n')

