# import sys
# import math

register_encoding = {
    "x0": 0b00000,
    "x1": 0b00001,
    "x2": 0b00010,
    "x3": 0b00011,
    "x4": 0b00100,
    "x5": 0b00101,
    "x6": 0b00110,
    "x7": 0b00111,
    "x8": 0b01000,
    "x9": 0b01001,
    "x10": 0b01010,
    "x11": 0b01011,
    "x12": 0b01100,
    "x13": 0b01101,
    "x14": 0b01110,
    "x15": 0b01111,
    "x16": 0b10000,
    "x17": 0b10001,
    "x18": 0b10010,
    "x19": 0b10011,
    "x20": 0b10100,
    "x21": 0b10101,
    "x22": 0b10110,
    "x23": 0b10111,
    "x24": 0b11000,
    "x25": 0b11001,
    "x26": 0b11010,
    "x27": 0b11011,
    "x28": 0b11100,
    "x29": 0b11101,
    "x30": 0b11110,
    "x31": 0b11111
}
def decode_instruction(instruction):
    opcode = instruction & 0b1111111
    print(opcode)
    print(instruction)
    if opcode == 0b0110011:  # R-type
        rd = (instruction >> 7) & 0b11111
        funct3 = (instruction >> 12) & 0b111
        rs1 = (instruction >> 15) & 0b11111
        rs2 = (instruction >> 20) & 0b11111
        funct7 = (instruction >> 25) & 0b1111111
        return "R-type", rd, rs1, rs2, funct3, funct7
    
    elif opcode in [0b0000011, 0b0010011, 0b1100111]:  # I-type
        rd = (instruction >> 7) & 0b11111
        print(rd)
        funct3 = (instruction >> 12) & 0b111
        rs1 = (instruction >> 15) & 0b11111
        print(rs1)
        imm = (instruction >> 20) & 0xFFF
        return "I-type", rd, rs1, funct3, imm
    
    elif opcode == 0b0100011:  # S-type
        imm = ((instruction >> 25) << 5) | ((instruction >> 7) & 0b11111)
        rs1 = (instruction >> 15) & 0b11111
        rs2 = (instruction >> 20) & 0b11111
        funct3 = (instruction >> 12) & 0b111
        return "S-type", rs1, rs2, funct3, imm
    
    elif opcode == 0b1100011:  # B-type
        imm = ((instruction >> 31) << 12) | (((instruction >> 7) & 0b11111) << 5) | \
              (((instruction >> 25) & 0b111111) << 1) | (((instruction >> 8) & 0b1) << 11)
        rs1 = (instruction >> 15) & 0b11111
        rs2 = (instruction >> 20) & 0b11111
        funct3 = (instruction >> 12) & 0b111
        return "B-type", rs1, rs2, funct3, imm
    
    elif opcode in [0b0110111, 0b0010111]:  # U-type
        rd = (instruction >> 7) & 0b11111
        imm = instruction & 0xFFFFF000
        return "U-type", rd, imm
    
    elif opcode == 0b1101111:  # J-type
        rd = (instruction >> 7) & 0b11111
        imm = ((instruction >> 31) << 20) | (((instruction >> 21) & 0b1111111111) << 1) | \
              (((instruction >> 20) & 0b1) << 11) | (((instruction >> 12) & 0b11111111) << 12)
        return "J-type", rd, imm
    
    else:
        return "Unknown"
    
def extend(value, length):
    if value & (1 << (length - 1)):
        return value | ((1 << (32 - length)) - 1) << length
    else:
        return value

def add(rd, rs1, rs2):
    return rd, rs1 + rs2

def sub(rd, rs1, rs2):
    return rd, rs1 - rs2

def sll(rd, rs1, rs2):
    return rd, rs1 << (rs2 & 0b11111)

def slt(rd, rs1, rs2):
    return rd, int(rs1 < rs2)

def sltu(rd, rs1, rs2):
    return rd, int(rs1 < rs2)

def xor(rd, rs1, rs2):
    return rd, rs1 ^ rs2

def srl(rd, rs1, rs2):
    return rd, rs1 >> (rs2 & 0b11111)

def _or(rd, rs1, rs2):
    return rd, rs1 | rs2

def _and(rd, rs1, rs2):
    return rd, rs1 & rs2

# R-type 
def Rtype(instruction):
    opcode = instruction & 0b1111111
    funct3 = (instruction >> 12) & 0b111
    funct7 = (instruction >> 25) & 0b1111111
    rs1 = (instruction >> 15) & 0b11111
    rs2 = (instruction >> 20) & 0b11111
    rd = (instruction >> 7) & 0b11111
    return opcode, funct3, funct7, rs1, rs2, rd

# Main simulator 
def simulator(instruction, rs1_val, rs2_val):
    opcode, funct3, funct7, rs1, rs2, rd = Rtype(instruction)
    if opcode == 0b0110011:
        if funct3 == 0b000 and funct7 == 0b0000000:
            return add(rd, rs1_val, rs2_val)
        elif funct3 == 0b000 and funct7 == 0b0100000:
            return sub(rd, rs1_val, rs2_val)
        elif funct3 == 0b001 and funct7 == 0b0000000:
            return sll(rd, rs1_val, rs2_val)
        elif funct3 == 0b010 and funct7 == 0b0000000:
            return slt(rd, rs1_val, rs2_val)
        elif funct3 == 0b011 and funct7 == 0b0000000:
            return sltu(rd, rs1_val, rs2_val)
        elif funct3 == 0b100 and funct7 == 0b0000000:
            return xor(rd, rs1_val, rs2_val)
        elif funct3 == 0b101 and funct7 == 0b0000000:
            return srl(rd, rs1_val, rs2_val)
        elif funct3 == 0b110 and funct7 == 0b0000000:
            return _or(rd, rs1_val, rs2_val)
        elif funct3 == 0b111 and funct7 == 0b0000000:
            return _and(rd, rs1_val, rs2_val)
        else:
            raise ValueError("Unsupported R-type instruction")
    else:
        raise ValueError("Invalid opcode for R-type instruction")


# import sys
# import math

# # Define registers
# registers = {
#     "s0": 0, "s1": 0, "s2": 0, "s3": 0, "s4": 0, "s5": 0, "s6": 0, "s7": 0,
#     "s8": 0, "s9": 0, "s10": 0, "s11": 0,
#     "a0": 0, "a1": 0, "a2": 0, "a3": 0, "a4": 0, "a5": 0, "a6": 0, "a7": 0,
#     "zero": 0, "ra": 0, "sp": 0, "gp": 0, "tp": 0, "t0": 0, "t1": 0, "t2": 0,
#     "t3": 0, "t4": 0, "t5": 0, "t6": 0
# }

# Define instruction execution functions for B type
def beq(rs1, rs2, offset):
    if registers[rs1] == registers[rs2]:
        return offset
    else:
        return 0

def bne(rs1, rs2, offset):
    if registers[rs1] != registers[rs2]:
        return offset
    else:
        return 0

def blt(rs1, rs2, offset):
    if registers[rs1] < registers[rs2]:
        return offset
    else:
        return 0

def bge(rs1, rs2, offset):
    if registers[rs1] >= registers[rs2]:
        return offset
    else:
        return 0

def bltu(rs1, rs2, offset):
    if registers[rs1] < registers[rs2]:
        return offset
    else:
        return 0

def bgeu(rs1, rs2, offset):
    if registers[rs1] >= registers[rs2]:
        return offset
    else:
        return 0

# Define instruction execution functions for I type
def lw(rd, rs1, imm):
    registers[rd] = memory[registers[rs1] + imm]

def addi(rd, rs1, imm):
    registers[rd] = registers[rs1] + imm

def sltiu(rd, rs1, imm):
    registers[rd] = 1 if registers[rs1] < imm else 0

def jalr(rd, rs1, imm):
    registers[rd] = pc + 4
    return registers[rs1] + imm    

def sext_imm(imm):
    # Sign extend immediate value
    imm = imm & 0xfff
    if imm & 0x800:
        imm = imm | 0xfffff000
    return imm

def sw(rd, rs1_val, rs2_val, imm):
    # Store word: mem(rs1 + sext(imm[11:0])) = rs2_val
    addr = rs1_val + sext_imm(imm)
    # In a real system, you would store rs2_val to memory at address addr
    print("Storing", rs2_val, "to memory at address", addr)

def Stype(instruction):
    imm = ((instruction >> 25) << 5) | ((instruction >> 7) & 0b11111)
    rs2 = (instruction >> 20) & 0b11111
    rs1 = (instruction >> 15) & 0b11111
    funct3 = (instruction >> 12) & 0b111
    return imm, rs2, rs1, funct3

def simulator(instruction, rs1_val, rs2_val):
    opcode = instruction & 0b1111111
    if opcode == 0b0100011:  # S-type instruction
        imm, rs2, rs1, funct3 = Stype(instruction)
        if funct3 == 0b010:
            sw(rs1, rs1_val, rs2_val, imm)
        else:
            raise ValueError("Unsupported S-type instruction")
    else:
        raise ValueError("Invalid opcode")

# Define instruction execution functions for I type
def lw(rd, rs1, imm):
    registers[rd] = memory[registers[rs1] + imm]

def addi(rd, rs1, imm):
    registers[rd] = registers[rs1] + imm

def sltiu(rd, rs1, imm):
    registers[rd] = 1 if registers[rs1] < imm else 0

def jalr(rd, rs1, imm):
    registers[rd] = pc + 4
    return registers[rs1] + imm

# Define instruction opcode mappings for B type
opcodes_b = {
    "beq": beq, "bne": bne, "blt": blt, "bge": bge, "bltu": bltu, "bgeu": bgeu
}

# Define instruction opcode mappings for I type
opcodes_i = {
    "lw": lw, "addi": addi, "sltiu": sltiu, "jalr": jalr
}

# Main simulation function
def simulate(instructions):
    pc = 0
    while pc < len(instructions):
        inst = instructions[pc]
        opcode = inst[0]
        if opcode in opcodes_b:
            rs1, rs2, offset = inst[1], inst[2], inst[3]
            jump_offset = opcodes_b[opcode](rs1, rs2, offset)
            pc += jump_offset
        elif opcode in opcodes_i:
            rd, rs1, imm = inst[1], inst[2], int(inst[3])
            jump_offset = opcodes_i[opcode](rd, rs1, imm)
            pc += jump_offset
        else:
            print(f"Unsupported instruction: {opcode}")
            pc += 1

# Read instructions from file
def read_instructions(file_path):
    with open(file_path, 'r') as file:
        instructions = []
        for line in file:
            parts = line.strip().split(',')
            instructions.append(parts)
    return instructions

# Run simulation
instructions = read_instructions('C:\\Users\\ABHIJAYS\\OneDrive\\Desktop\\testcase.py')
simulate(instructions)

# Print register values after simulation
print("Register values after simulation:")
for reg, val in registers.items():
    print(f"{reg}: {val}")

# Define instruction opcode mappings for B type
opcodes_b = {
    "beq": beq, "bne": bne, "blt": blt, "bge": bge, "bltu": bltu, "bgeu": bgeu
}

# Define instruction opcode mappings for I type
opcodes_i = {
    "lw": lw, "addi": addi, "sltiu": sltiu, "jalr": jalr
}

# Main simulation function
def simulate(instructions):
    pc = 0
    while pc < len(instructions):
        inst = instructions[pc]
        opcode = inst[0]
        if opcode in opcodes_b:
            rs1, rs2, offset = inst[1], inst[2], inst[3]
            jump_offset = opcodes_b[opcode](rs1, rs2, offset)
            pc += jump_offset
        elif opcode in opcodes_i:
            rd, rs1, imm = inst[1], inst[2], int(inst[3])
            jump_offset = opcodes_i[opcode](rd, rs1, imm)
            pc += jump_offset
        else:
            print(f"Unsupported instruction: {opcode}")
            pc += 1

# Read instructions from file
def read_instructions(file_path):
    with open(file_path, 'r') as file:
        instructions = []
        for line in file:
            parts = line.strip().split(',')
            instructions.append(parts)
    return instructions

# Run simulation
instructions = read_instructions('C:\\Users\\ABHIJAYS\\OneDrive\\Desktop\\testcase.py')
simulate(instructions)

# Print register values after simulation
print("Register values after simulation:")
for reg, val in registers.items():
    print(f"{reg}: {val}")


def extend(num, bits):
    mask = 1 << (bits - 1)
    return (num & ((1 << bits) - 1)) - (mask if num & mask else 0)

def lui(rd, imm):
    result = imm << 12
    return result, rd

def auipc(rd, imm, pc):
    
    result = (imm << 12) + pc
    return result, rd

def execute(instruction, pc):
    opcode = instruction & 0b1111111
    rd = (instruction >> 7) & 0b11111
    imm = (instruction >> 12) & 0xFFFFF

    if opcode == 0b0110111:
        return lui(rd, imm)
    elif opcode == 0b0010111:
        return auipc(rd, imm, pc)
def sext_imm(imm):
    # Sign extend immediate value
    imm = imm & 0xfff
    if imm & 0x800:
        imm = imm | 0xfffff000
    return imm

def jal(rd, imm, pc):
    # Jump and link: rd = PC + 4, PC = PC + sext(imm[20:1] || 1'b0)
    return rd, pc + 4, pc + sext_imm(imm) << 1

def Jtype(instruction):
    imm = ((instruction >> 21) & 0b111111111111) | ((instruction >> 20) & 0b100000000000)
    rd = (instruction >> 7) & 0b11111
    return imm, rd

def simulator(instruction, pc):
    opcode = instruction & 0b1111111
    if opcode == 0b1101111:  # J-type instruction
        imm, rd = Jtype(instruction)
        return jal(rd, imm, pc)
    else:
        raise ValueError("Invalid opcode for J-type instruction")                    
